# Blosxom Plugin: geek
# Author(s): Eric Davis <edavis <at> foobargeek <dot> com>
# Documentation: See the bottom of this file or type: perldoc geek

package geek;

# --- Configurable variables -----

# geek the story title
my $geek_title = 1;

# geek the story body
my $geek_body = 1;

# show all 8 bits for binary geek (default is 7)
# note that the 8th bit will always be 0 for ascii
my $show_eight_bits = 1;

# configure the width (number of bytes) for the "dump"
# style output, this must be a multiple of 2 for output
# to look correct
my $geek_dump_width = 12;

# for every entry here, there must be a corresponding entry in %geek_labels
# this list defines the order the labels will be shown in the $geek::links
# display

my @available_modes = ( 'nrm',   # normal ascii (keep)
                        'dmp',   # memory dump (hex + ascii)
                        'hex',   # hexadecimal
                        'oct',   # octal
                        'dec',   # decimal
                        'bin',   # binary
                        'chf',   # swedish chef
                        'jve',   # jive
                        'hxr' ); # h@x0r

# these are the labels that are shown within the geek links list

my %geek_labels = ( 'nrm' => 'normal',
                    'dmp' => 'dump',
                    'hex' => 'hexadecimal',
                    'oct' => 'octal',
                    'dec' => 'decimal',
                    'bin' => 'binary',
                    'chf' => 'chef',
                    'jve' => 'jive',
                    'hxr' => 'h@x0r' );

# application locations of unknown convert modes
# this plugin has builtins for 'nrm', 'dmp', 'hex', 'oct', 'dec', and 'bin'

my %convert_apps = ( 'chf' => '/usr/local/bin/chef',
                     'jve' => '/usr/local/bin/jive',
                     'hxr' => '/usr/local/bin/warez' );

# --------------------------------

use CGI qw/:standard/;

$links; # $geek::links

my $geekmode = 'nrm';


sub start
{
    # check the CGI parameters for a geek setting

    $geekmode = param('geek') if param('geek');

    # create the geek links for the current URL

    $links  = qq{<ul class="geek_links">\n};

    my $active = qq{<li class="geek_links_active_item">};
    my $item   = qq{<li class="geek_links_item">};
    my $anchor = qq{<a href="$blosxom::url/$blosxom::path_info};
    my $end    = qq{</a></li>\n};

    foreach (@available_modes)
    {
        $links .= ($geekmode eq $_) ? $active : $item;

        $links .= (/^nrm$/) ? qq{$anchor">$geek_labels{$_}$end}
                            : qq{$anchor?geek=$_">$geek_labels{$_}$end};
    }

    $links .= qq{</ul>\n};

    return 1;
}


sub geek_it
{
    my ($mode, $data) = @_;

    my $in_tag = 0;
    my $new_data = qq{<span class="geek_dump">\n};

    foreach (split/\n/, $data) 
    {
        # remove all beginning whitespace
        $_ =~ s/^\s+//;

        # remove all trailing whitespace
        $_ =~ s/\s+$//;

        # tack the newline back on so html source looks decent
        $_ =~ s/$/\n/;

        foreach (split(//))
        {
            # don't geek newlines
            if (/[\r\n]/)
            {
                $new_data .= $_;
                next;
            }

            # don't geek html tags
            # all character between a '<' and '>' (inclusive)
            $in_tag = 1 if ($_ eq '<');

            if ($in_tag)
            {
                $new_data .= $_;
                $in_tag = 0 if ($_ eq '>');
                next;
            }

            # geek this character

            if ($mode eq 'hex')
            {
                $new_data .= sprintf("%02x", ord());
            }
            elsif ($mode eq 'oct')
            {
                $new_data .= sprintf("%03o", ord());
            }
            elsif ($mode eq 'dec')
            {
                $new_data .= sprintf("%03d", ord());
            }
            elsif ($mode eq 'bin')
            {
                my $tmp = ord();

                if ($show_eight_bits)
                {
                    foreach my $i (0..7)
                    {
                        $new_data .= (($tmp << $i) & 0x80) ? "1" : "0";
                    }
                }
                else
                {
                    foreach my $i (0..6)
                    {
                        $new_data .= (($tmp << $i) & 0x40) ? "1" : "0";
                    }
                }
            }

            # add a space after every geek'ed character
            # this looks a lot better expecially during window resizes
            $new_data .= " ";
        }
    }

    $new_data .= qq{</span>\n};

    return $new_data;
}


sub geek_it_dump_character
{
    my ($count, $cnt_col, $hex_col, $txt_col, $line_data, $ch) = @_;

    if (($$count % $geek_dump_width) == 0)
    {
        # $geek_dump_width bytes have been encoded on a line - start a new line
        if ($$line_data eq "")
        {
            $$cnt_col .= sprintf("%08x:&nbsp\;<br />\n", $$count);
        }
        else
        {
            $$hex_col .= "&nbsp\;&nbsp\;<br />\n";
            $$txt_col .= sprintf("%s<br />\n", $$line_data);
            $$cnt_col .= sprintf("%08x:&nbsp\;<br />\n", $$count);
            $$line_data = "";
        }
    }
    elsif (($$count % 2) == 0)
    {
        # still building an encoded $geek_dump_width byte line
        $$hex_col .= "&nbsp\;";
    }

    $$count += 1;

    # add character to ascii data

    $_ = $ch;

    if    (/</)  { $$line_data .= "&lt\;"; }
    elsif (/>/)  { $$line_data .= "&gt\;"; }
    elsif (/&/)  { $$line_data .= "&amp\;"; }
    elsif (/\"/) { $$line_data .= "&quot\;"; }
    else         { $$line_data .= /[a-zA-Z0-9 ~`!@#\$%^\*()-_=\+\[{\]}\\|\;:',\.\/?]/ ? $_ : "."; }

    # geek this character

    $$hex_col .= sprintf("%02x", ord());
}


sub geek_it_dump
{
    my ($data) = @_;

    my $in_tag = 0;
    my $count = 0;
    my $line_data = '';
    my $tag = '';
    my $tmp_data = '';
    my $new_data = qq{<span class="geek_dump"><table><tr>\n};

    my $cnt_col = '';
    my $hex_col = '';
    my $txt_col = '';

    foreach (split/\n/, $data) 
    {
        # remove all beginning whitespace
        $_ =~ s/^\s+//;

        # remove all trailing whitespace
        $_ =~ s/\s+$//;

        # tack the newline back on so html source looks decent
        $_ .= "\n";

        $tmp_data .= $_;
    }

    foreach (split(//, $tmp_data))
    {
        # html tag - all characters between a '<' and '>' (inclusive)
        if (/</)
        {
            $in_tag = 1;
            $tag = $_;
            next;
        }
        elsif ($in_tag)
        {
            $tag .= $_;

            if (/>/)
            {
                $in_tag = 0;
                $_ = $tag;

                # anchor and end anchor tags are left as is so links are still
                # available in the dump, all other html tags are geek'ed.
                if ((/^<\s*[aA]\s*.*>$/) or (/^<\s*\/\s*[aA]\s*>$/))
                {
                    $hex_col .= $tag;
                    $line_data .= $tag;
                }
                else
                {
                    # geek the html tag
                    foreach (split(//))
                    {
                        geek_it_dump_character(\$count, \$cnt_col, \$hex_col, \$txt_col,
                                               \$line_data, $_);
                    }
                }
            }

            next;
        }

        geek_it_dump_character(\$count, \$cnt_col, \$hex_col, \$txt_col,
                               \$line_data, $_);
    }

    # pad with zeros to $geek_dump_width byte alignment
    if (($count % $geek_dump_width) != 0)
    {
        $pad = ($geek_dump_width - ($count % $geek_dump_width));

        foreach (1..$pad)
        {
            if (($count % 2) == 0)
            {
                $hex_col .= "&nbsp\;";
            }

            $count += 1;
            $line_data .= ".";

            $hex_col .= "00";
        }
    }

    $hex_col .= "&nbsp\;&nbsp\;<br />\n";
    $txt_col .= "$line_data<br />\n";
    $line_data = "";

    $new_data .= qq{<td>\n$cnt_col</td>\n};
    $new_data .= qq{<td>\n$hex_col</td>\n};
    $new_data .= qq{<td>\n$txt_col</td>\n};
    $new_data .= qq{</tr></table></span>\n};

    return $new_data;
}


sub geek_it_app
{
    my ($app, $data) = @_;

    my $output_file = "/tmp/geek_$$";
    my $new_data = '';
    my $in_tag = 0;
    my $html_tag = '';
    my $html_tag_count = 0;
    my @html_tag_data;

    #
    # This code is a little tricky:
    #   . open write pipe to convert app
    #   . parse all data char by char
    #   . all html tags are removed and put in an array
    #     (replaced with special reference token)
    #   . reference token and non html tag chars sent on pipe
    #   . wait for convert app to finish
    #   . read in file with converted data
    #   . replace all reference tokens in converted data back
    #     to the original html tag
    #   . All done!
    #

    open(CONVERT, "| $app > $output_file") or return $data;

    foreach (split(//, $data))
    {
        # don't geek html tags
        # all character between a '<' and '>' (inclusive)
        $in_tag = 1 if ($_ eq '<');

        if ($in_tag)
        {
            $html_tag .= $_;

            if ($_ eq '>')
            {
                $in_tag = 0;
                push(@html_tag_data, $html_tag);
                print(CONVERT "<--$html_tag_count-->");
                $html_tag_count++;
                $html_tag = '';
            }

            next;
        }

        print(CONVERT $_);
    }

    close(CONVERT);

    open(CONVERT, "$output_file") or return $data;

    while (<CONVERT>)
    {
        $new_data .= $_;
    }

    close(CONVERT);

    for my $i (0..$html_tag_count-1)
    {
        $new_data =~ s/<--$i-->/$html_tag_data[$i]/;
    }

    return $new_data;
}


sub story
{
    my ($pkg, $path, $filename, $story_ref, $title_ref, $body_ref) = @_;

	return 1 if ($geekmode eq 'nrm');

	if ($geekmode eq 'dmp')
    {
        $$title_ref = geek_it_dump($$title_ref) if $geek_title;
        $$body_ref  = geek_it_dump($$body_ref)  if $geek_body;
    }
    elsif ($geekmode =~ /hex|oct|dec|bin/)
    {
        $$title_ref = geek_it($geekmode, $$title_ref) if $geek_title;
        $$body_ref  = geek_it($geekmode, $$body_ref)  if $geek_body;
    }
	else # external convert application
    {
        my $app = $convert_apps{$geekmode};

        return 1 if not $app;

        $$title_ref = geek_it_app($app, $$title_ref) if $geek_title;
        $$body_ref  = geek_it_app($app, $$body_ref)  if $geek_body;
    }

    return 1;
}

1;


__END__

=head1 NAME

Blosxom Plug-in: geek

=head1 DESCRIPTION

This plugin is arguably the lamest, least-useful, most idiotic, extremely
demented, and coolest blosxom plugin there is.  You'll either scratch your
head and say "What the...", or smile and say "That's awesome...".  This
plugin is used to present your stories in normal ascii, hexadecimal, octal,
decimal, binary, memory dump, and any other tranformation that an external
application performs (i.e. swedish chef, jive, h@x0r, etc).

Other than the encoded story output there is a variable filled in by
geek that can be used within your themes.  The B<$geek::links> variable
is filled in with an unordered list that contains links to the various
geek encodings of the currently display URL.

If you don't want to use the B<$geek::links> list for accessing the geek
encodings you can simply tack on any of the following CGI strings to a URL:

B<?geek=dmp>: the wicked memory dump format

B<?geek=hex>: hexadecimal format

B<?geek=oct>: octal format

B<?geek=dec>: decimal format

B<?geek=bin>: binary format

B<?geek=chf>: swedish chef

B<?geek=jve>: jive

B<?geek=hxr>: h@x0r

Note that if your using the meta plugin make sure that runs before this
plugin so the meta variables don't get geek'ed and presented in the output
(i.e. rename meta to 00meta or something).  This plugin can be modified via
the following configuration variables:

B<$geek_title>: set to 1 to encode the story title

B<$geek_body>: set to 1 to encode the story body

B<$show_eight_bits>: set to 1 to show all 8 bits for binary encoding (note that
the 8th bit will always be zero for ascii)

B<$geek_dump_width>: set this to the number of bytes per row in the memory
dump format (must be a multiple of 2)

B<@available_modes>: This list defines the order of the labels that are shown
in the B<$geek::links> unordered list.  Note that for every entry in this list,
there must be a corresponding entry in the B<%geek_labels> hash.

B<%geek_labels>: modify this hash to the labels you want to see in your geek list

B<%convert_apps>: This hash defines external applications that can perform a
transformation.  These applications must take input via stdin and spit out the
transformed text via stdout.  This plugin has builtins for the 'nrm', 'dmp',
'hex', 'oct', 'dec', and 'bin' transformations.

The following class identifiers are used for CSS control of the output:

B<geek_dump>: span label around the encoded title and/or story

B<geek_links>: unordered geek link list

B<geek_links_item>: an item in the unordered geek link list

B<geek_links_active_item>: an item in the unordered geek link list
(this one respresents the current geek mode being displayed)

=head1 VERSION

1.4  added ability to use external applications for transforming text

=head1 VERSION HISTORY

1.3  the byte width of the "dump" output is now configurable (x2)

1.2  fixed byte alignment padding problem with the "dump" output

1.1  initial implementation

=head1 AUTHORS

Eric Davis <edavis <at> foobargeek <dot> com> http://www.foobargeek.com

=head1 LICENSE

This source is submitted to the public domain.  Feel free to use and modify it.
If you like, a comment in your modified source attributing credit for my
original work would be appreciated.

THIS SOFTWARE IS PROVIDED AS IS AND WITHOUT ANY WARRANTY OF ANY KIND.  USE AT
YOUR OWN RISK!

